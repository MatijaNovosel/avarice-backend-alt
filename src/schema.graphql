# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  currency: String!
  id: ID!
  initialBalance: Int!
  name: String!
  templates: [Template!]
  transactions: [Transaction!]
  transferTransactions: [Transaction!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
}

type AccountBalanceModel {
  balance: Int!
  currency: String!
  id: String!
  name: String!
}

input AccountExpenseAndIncomeInput {
  accountId: String!
  timePeriod: Int!
}

type AccountExpenseAndIncomeModel {
  expense: Int!
  income: Int!
}

input AccountHistoryInput {
  accountId: String!
  timePeriod: Int!
}

type AccountHistoryModel {
  amount: Int!
  date: DateTime!
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Category {
  children: [Category!]
  color: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  icon: String!
  id: ID!
  name: String!
  parent: Category
  system: Boolean!
  templates: [Template!]
  transactions: [Transaction!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateTransactionInput {
  accountId: String!
  amount: Int!
  categoryId: String!
  description: String!
  latitude: Int!
  longitude: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createTransaction(data: CreateTransactionInput!): Transaction!
  refreshToken(token: JWT!): Token!
  signIn(data: LoginInput!): Auth!
  signUp(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PostOrder {
  direction: OrderDirection!
}

type Query {
  getAccountHistory(data: AccountHistoryInput!): [AccountHistoryModel!]!
  getExpenseAndIncomeInTimePeriod(data: AccountExpenseAndIncomeInput!): AccountExpenseAndIncomeModel!
  getTransactionById: Transaction!
  getTransactions(orderBy: PostOrder, query: String): TransactionConnection!
  getUserAccounts: [AccountBalanceModel!]!
  getUserCategories: [Category!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
  username: String!
}

type Subscription {
  transactionCreated: Transaction!
}

type Template {
  account: Account
  amount: Int!
  category: Category

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  id: ID!
  latitude: Int!
  longitude: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

type Transaction {
  account: Account
  amount: Int!
  category: Category

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  id: ID!
  latitude: Int!
  longitude: Int!
  transferAccount: Account

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type TransactionConnection {
  edges: [TransactionEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  accounts: [Account!]
  categories: [Category!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstName: String
  id: ID!
  lastName: String
  role: Role!
  transactions: [Transaction!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  username: String!
}